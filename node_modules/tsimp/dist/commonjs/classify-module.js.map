{"version":3,"file":"classify-module.js","sourceRoot":"","sources":["../../src/classify-module.ts"],"names":[],"mappings":";AAAA,wEAAwE;;;AAExE,2CAA4C;AAC5C,6CAA2C;AAC3C,+BAAuC;AACvC,+CAAqC;AACrC,yDAA6C;AAGtC,MAAM,iBAAiB,GAAG,CAAC,CAAM,EAAwB,EAAE,CAChE,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,UAAU,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAA;AADlD,QAAA,iBAAiB,qBACiC;AAE/D,MAAM,UAAU,GAAG,IAAA,oBAAW,EAC5B,IAAA,mBAAS,EAAC,CAAC,EAAU,EAAE,EAAE;IACvB,MAAM,QAAQ,GAAG,IAAA,2BAAQ,EAAC,EAAE,CAAC,CAAA;IAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,SAAS,CAAA;IAClB,CAAC;IACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAA;IACnC,OAAO,IAAA,yBAAiB,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA;AAC9C,CAAC,CAAC,CACH,CAAA;AAEM,MAAM,cAAc,GAAG,CAC5B,QAAgB,EACU,EAAE;IAC5B,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/B,OAAO,MAAM,CAAA;IACf,CAAC;IACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAC3D,OAAO,UAAU,CAAA;IACnB,CAAC;SAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAClE,OAAO,QAAQ,CAAA;IACjB,CAAC;SAAM,CAAC;QACN,KAAK,MAAM,GAAG,IAAI,IAAA,qBAAM,EAAC,IAAA,cAAO,EAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YAC5C,MAAM,CAAC,GAAG,UAAU,CAAC,IAAA,cAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAA;YAClD,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAA;QACjB,CAAC;IACH,CAAC;IACD,OAAO,UAAU,CAAA;AACnB,CAAC,CAAA;AAjBY,QAAA,cAAc,kBAiB1B","sourcesContent":["// figure out whether a given module should be interpreted as ESM or CJS\n\nimport { cachedMtime } from '@isaacs/cached'\nimport { catchWrap } from '@isaacs/catcher'\nimport { dirname, resolve } from 'path'\nimport { walkUp } from 'walk-up-path'\nimport { readFile } from './ts-sys-cached.js'\n\nexport type PackageJsonType = 'commonjs' | 'module'\nexport const isPackageJsonType = (t: any): t is PackageJsonType =>\n  typeof t === 'string' && (t === 'commonjs' || t === 'module')\n\nconst readPJType = cachedMtime(\n  catchWrap((pj: string) => {\n    const contents = readFile(pj)\n    if (!contents) {\n      return undefined\n    }\n    const t = JSON.parse(contents).type\n    return isPackageJsonType(t) ? t : 'commonjs'\n  }),\n)\n\nexport const classifyModule = (\n  fileName: string,\n): PackageJsonType | 'json' => {\n  if (fileName.endsWith('.json')) {\n    return 'json'\n  }\n  if (fileName.endsWith('.cts') || fileName.endsWith('.cjs')) {\n    return 'commonjs'\n  } else if (fileName.endsWith('.mts') || fileName.endsWith('.mjs')) {\n    return 'module'\n  } else {\n    for (const dir of walkUp(dirname(fileName))) {\n      const t = readPJType(resolve(dir, 'package.json'))\n      if (t) return t\n    }\n  }\n  return 'commonjs'\n}\n"]}